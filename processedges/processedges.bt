// collects distributions for ProcessEdges packet sizes (overall and by thread) and root packet sizes

uretprobe:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:harness_begin {
    //begin collecting data at harness_begin (start of final iteration)
    @stats_enabled = 1;
}

uretprobe:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:harness_end {
    //begin collecting data at harness_end (end of final iteration)
    @stats_enabled = 0;
}

usdt:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:mmtk:startwork {
    if (!@stats_enabled) {
        return;
    }
    @startwork[tid] = nsecs;
}

usdt:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:mmtk:endwork {
    if (!@stats_enabled) {
        return;
    }
    $start = @startwork[tid];
    if ($start) {
        $end = nsecs;
        //cumulative work time over packet type
        @acc[arg0] = sum($end - $start);
    }
}

// start timer for process edges work bucket
usdt:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:mmtk:processedgesstart {
    if (!@stats_enabled) {
        return;
    }
    @startprocessedges = nsecs;
}

// store time for process edges work bucket
usdt:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:mmtk:processedgesend {
    if (!@stats_enabled) {
        return;
    }
    $start = @startprocessedges;
    if ($start) {
        @processedgestime = sum(nsecs - $start);
    }
}

usdt:/home/claireh/openjdk/build/fixedsc/images/jdk/lib/server/libmmtk_openjdk.so:mmtk:processedgeslen {
    if (!@stats_enabled) {
        return;
    }
    // distribution for root packets
    if (arg1) {
        @roots = hist(arg0);
    }
    // distribution of size of each work packet
    @processedgeslen = hist(arg0);
    // packet size distribution by thread
    @packetsize[tid] = hist(arg0);
    // work item counter by thread
    @processedgeswork[tid] = sum(arg0);
}
